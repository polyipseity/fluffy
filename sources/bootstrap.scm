(import (srfi 5) (scheme base) (scheme cxr) (scheme file) (scheme read) (scheme write))
(let (
	(input (open-input-file "compiler.flw"))
	(output (open-output-file "compiler.scm"))
)
	(define source-0 (lambda (input accumulator)
		(define result (read input))
		(if (eof-object? result)
			(reverse accumulator)
			(source-0 input (cons result accumulator))
		)
	))
	(define source (source-0 input ()))
	(define compile (lambda (source)
		(define get-symbol (lambda (symbol-table symbol)
			(if (null? symbol-table)
				()
				(if (equal? symbol (caar symbol-table))
					(cadar symbol-table)
					(get-symbol (cdr symbol-table) symbol)
				)
			)
		))
		(define compile-base (lambda (source symbol-table)
			(define result (reverse (quote (
				(import (scheme base) (scheme file) (scheme read) (scheme vector) (scheme write))
				(define stack ())
				(define heap (make-vector 16 ()))
			))))
			(cons
				(cons (quote lambda) (cons (quote (memory)) (car (compile-statements compile-dispatch source (cons () (cons symbol-table ()))))))
				result
			)
		))
		(define compile-statements (lambda (func statements accumulator)
			(define results (car accumulator))
			(define symbol-table (cadr accumulator))
			(if (null? statements)
				(cons (reverse (car accumulator)) (cdr accumulator))
				(compile-statements func (cdr statements) ((lambda ()
					(define result (func (car statements) symbol-table))
					(cons (cons (car result) results) (cons (cadr result) (cddr accumulator)))
				)))
			)
		))
		(define compile-dispatch (lambda (statement symbol-table)
			(define symbol (car statement))
			(define func (get-symbol symbol-table symbol))
			(if (null? func)
				((lambda ()
					(define result (compile-dispatch symbol symbol-table))
					(set! symbol-table (cadr result))
					((car result) statement symbol-table)
				))
				(func statement symbol-table)
			)
		))
		(define compile-import (lambda (statement symbol-table)
			(define value (cadr statement))
			(if (equal? value "builtins")
				(cons () (cons (cons
					(cons (quote open) (cons compile-open ())) (cons
					(cons (quote lambda) (cons compile-lambda ()))
				symbol-table)) ()))
			)
		))
		(define compile-lambda (lambda (statement symbol-table)
			(cons () (cons symbol-table ()))
		))
		(define compile-open (lambda (statement symbol-table)
			(cons () (cons symbol-table ()))
		))
		(reverse (compile-base source (cons
			(cons (quote import) (cons compile-import ()))
		())))
	))
	(display "source: ")(write source)(newline)
	(display "program: ")
	(for-each (lambda (statement)
		(write statement)(newline)
		(write statement output)(newline output)
	) (compile source))
	(close-output-port output)
	(close-input-port input)
)
